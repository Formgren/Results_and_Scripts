task_id,code_response
HumanEval/0,"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) <= threshold:
                return True
    return False
"
HumanEval/2,"def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
    integer_part = int(number)
    decimal_part = number - integer_part
    return decimal_part
"
HumanEval/3,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    """"""
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
"
HumanEval/4,"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    """"""
    mean = sum(numbers) / len(numbers)
    absolute_differences = [abs(x - mean) for x in numbers]
    mad = sum(absolute_differences) / len(absolute_differences)
    return mad

print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))
"
HumanEval/5,"from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    result = []
    for i in range(len(numbers)):
        result.append(numbers[i])
        if i < len(numbers) - 1:
            result.append(delimeter)
    return result
"
HumanEval/6,"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
    max_levels = []
    for group in paren_string.split():
        level = 0
        max_level = 0
        for char in group:
            if char == '(':
                level += 1
                if level > max_level:
                    max_level = level
            elif char == ')':
                level -= 1
        max_levels.append(max_level)
    return max_levels
"
HumanEval/7,"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    """"""
    return [s for s in strings if substring in s]
"
HumanEval/11,"from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    result = """"
    for i in range(len(a)):
        if a[i] == b[i]:
            result += ""0""
        else:
            result += ""1""
    return result
"
HumanEval/12,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    """"""
    if not strings:
        return None
    longest_string = strings[0]
    for string in strings:
        if len(string) > len(longest_string):
            longest_string = string
    return longest_string
"
HumanEval/13,"def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b """"""
    if b == 0:
        return a
    else:
        return greatest_common_divisor(b, a % b)
"
HumanEval/14,"from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    prefixes = []
    for i in range(len(string)):
        prefixes.append(string[:i+1])
    return prefixes
"
HumanEval/16,"def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    """"""
    distinct_chars = set()
    for char in string:
        distinct_chars.add(char.lower())
    return len(distinct_chars)
"
HumanEval/17,"from typing import List

def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o|.| o| o|.|.|.|.| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
    beats = []
    for note in music_string.split():
        if note == 'o':
            beats.append(4)
        elif note == 'o|':
            beats.append(2)
        elif note == '.|':
            beats.append(1)
    return beats
"
HumanEval/21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    """"""
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
"
HumanEval/22,"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
    return [x for x in values if isinstance(x, int)]
"
HumanEval/23,"def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
"
HumanEval/24,"def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    """"""
    for i in range(n-1, 1, -1):
        if n % i == 0:
            return i
    return 1
"
HumanEval/25,"from typing import List

def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    """"""
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

print(factorize(8)) # [2, 2, 2]
print(factorize(25)) # [5, 5]
print(factorize(70)) # [2, 5, 7]
"
HumanEval/27,"def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return string.swapcase()
"
HumanEval/28,"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)
"
HumanEval/29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
"
HumanEval/30,"def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
    return [num for num in l if num > 0]
"
HumanEval/31,"def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
"
HumanEval/34,"def unique(l: list):
    """"""Return sorted unique elements in a list""""""
    return sorted(set(l))

print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))
"
HumanEval/35,"def max_element(l: list):
    """"""Return maximum element in the list.""""""
    return max(l)
"
HumanEval/37,"def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    """"""
    even_indices = [i for i in range(len(l)) if i % 2 == 0]
    even_values = [l[i] for i in even_indices]
    sorted_even_values = sorted(even_values)
    for i in even_indices:
        l[i] = sorted_even_values.pop(0)
    return l
"
HumanEval/38,"def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)

def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
"
HumanEval/40,"def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            for k in range(j+1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
"
HumanEval/42,"def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
    return [x+1 for x in l]
"
HumanEval/43,"def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    """"""
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False
"
HumanEval/44,"def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x == 0:
        return '0'
    result = ''
    while x > 0:
        result = str(x % base) + result
        x //= base
    return result
"
HumanEval/45,"def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    return 0.5 * a * h
"
HumanEval/48,"def is_palindrome(text: str) -> bool:
    """"""
    Checks if given string is a palindrome
    """"""
    if len(text) <= 1:
        return True
    else:
        return text[0] == text[-1] and is_palindrome(text[1:-1])
"
HumanEval/49,"def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).""""""
    if n == 0:
        return 1
    elif n % 2 == 0:
        return modp(n // 2, p) ** 2 % p
    else:
        return (2 * modp(n // 2, p) ** 2) % p
"
HumanEval/50,"def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])

def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
"
HumanEval/51,"def remove_vowels(text):
    vowels = ['a', 'e', 'i', 'o', 'u']
    new_text = ''
    for char in text:
        if char.lower() not in vowels:
            new_text += char
    return new_text
"
HumanEval/52,"def below_threshold(l: list, t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    for num in l:
        if num >= t:
            return False
    return True
"
HumanEval/53,"def add(x: int, y: int) -> int:
    """"""Add two numbers x and y""""""
    return x + y
"
HumanEval/55,"def fib(n: int) -> int:
    """"""Return n-th Fibonacci number.""""""
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(10)) # Output: 55
print(fib(1)) # Output: 1
print(fib(8)) # Output: 21
"
HumanEval/56,"def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    return not stack
"
HumanEval/57,"def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))
"
HumanEval/58,"def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]
    """"""
    common_elements = set(l1) & set(l2)
    return sorted(list(common_elements))
"
HumanEval/59,"def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n
"
HumanEval/60,"def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.""""""
    return sum(range(1, n+1))

print(sum_to_n(30)) # Output: 465
print(sum_to_n(100)) # Output: 5050
print(sum_to_n(5)) # Output: 15
print(sum_to_n(10)) # Output: 55
print(sum_to_n(1)) # Output: 1
"
HumanEval/61,"def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
    stack = []
    for char in brackets:
        if char == ""("":
            stack.append(char)
        elif char == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack
"
HumanEval/62,"def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 +....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    n = len(xs)
    result = []
    for i in range(1, n):
        result.append(i * xs[i])
    return result
"
HumanEval/63,"def fibfib(n: int) -> int:
    """"""The Fibonacci Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    """"""
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
"
HumanEval/65,"def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
    x_str = str(x)
    x_len = len(x_str)
    if shift > x_len:
        return x_str[::-1]
    else:
        return x_str[-shift:] + x_str[:-shift]
"
HumanEval/66,"def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
    sum = 0
    for char in s:
        if char.isupper():
            sum += ord(char)
    return sum
"
HumanEval/68,"def pluck(arr):
    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 3:
        Input: []
        Output: []

    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
    if not arr:
        return []

    even_values = [node for node in arr if node % 2 == 0]
    if not even_values:
        return []

    smallest_even_value = min(even_values)
    smallest_even_index = arr.index(smallest_even_value)

    return [smallest_even_value, smallest_even_index]
"
HumanEval/70,"def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    if not lst:
        return []
    min_val = min(lst)
    max_val = max(lst)
    new_lst = []
    for i in range(len(lst)):
        if i % 2 == 0:
            new_lst.append(min_val)
            lst.remove(min_val)
            if not lst:
                break
            min_val = min(lst)
        else:
            new_lst.append(max_val)
            lst.remove(max_val)
            if not lst:
                break
            max_val = max(lst)
    return new_lst
"
HumanEval/71,"import math

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    # Check if the three sides form a valid triangle
    if a + b > c and b + c > a and c + a > b:
        # Calculate the semi-perimeter
        s = (a + b + c) / 2
        # Calculate the area using Heron's formula
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        # Round the area to 2 decimal points and return it
        return round(area, 2)
    else:
        # If the three sides do not form a valid triangle, return -1
        return -1
"
HumanEval/72,"def will_it_fly(q, w):
    if is_balanced(q) and sum(q) <= w:
        return True
    else:
        return False

def is_balanced(q):
    return q == q[::-1]
"
HumanEval/78,"def is_prime(n):
    """"""
    Helper function to check if a number is prime.
    """"""
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def hex_key(num):
    """"""
    Function to count the number of hexadecimal digits that are primes.
    """"""
    count = 0
    for digit in num:
        if digit in ['2', '3', '5', '7', 'B', 'D']:
            if is_prime(int(digit, 16)):
                count += 1
    return count
"
HumanEval/79,"def decimal_to_binary(decimal):
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""
    binary = bin(decimal)[2:]
    return ""db"" + binary + ""db""
"
HumanEval/82,"def is_prime(n):
    """"""Return True if n is prime, False otherwise""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    """"""Return True if the length of the string is a prime number, False otherwise""""""
    return is_prime(len(string))
"
HumanEval/83,"def starts_one_ends(n):
    count = 0
    for i in range(10**(n-1), 10**n):
        if str(i)[0] == '1' or str(i)[-1] == '1':
            count += 1
    return count
"
HumanEval/87,"def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2)...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
    result = []
    for i, row in enumerate(lst):
        for j, col in enumerate(row):
            if col == x:
                result.append((i, j))
    result.sort(key=lambda x: (x[0], -x[1]))
    return result
"
HumanEval/88,"def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
    if len(array) <= 1:
        return array
    
    first_index = array[0]
    last_index = array[-1]
    sum_indices = first_index + last_index
    
    if sum_indices % 2 == 0:
        return sorted(array, reverse=True)
    else:
        return sorted(array)
"
HumanEval/92,"def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
    '''
    if type(x) == int and type(y) == int and type(z) == int:
        if x == y + z or y == x + z or z == x + y:
            return True
    return False
"
HumanEval/94,"def is_prime(n):
    """"""Function to check if a number is prime""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def sum_of_digits(n):
    """"""Function to calculate the sum of digits of a number""""""
    return sum(int(digit) for digit in str(n))

def skjkasdkd(lst):
    """"""Function to find the largest prime value and return the sum of its digits""""""
    prime_lst = [num for num in lst if is_prime(num)]
    if not prime_lst:
        return 0
    largest_prime = max(prime_lst)
    return sum_of_digits(largest_prime)

# Test Cases
print(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # Output: 10
print(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # Output: 25
print(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output: 13
print(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # Output: 11
print(skjkasdkd([0,81,12,3,1,21])) # Output: 3
print(skjkasdkd([0,8,1,2,1,7])) # Output: 7
"
HumanEval/95,"def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    """"""
    if not dict:
        return False
    
    first_key = next(iter(dict))
    if isinstance(first_key, str):
        if all(isinstance(key, str) for key in dict):
            if all(key.islower() for key in dict):
                return True
            elif all(key.isupper() for key in dict):
                return True
            else:
                return False
        else:
            return False
    else:
        return False
"
HumanEval/96,"def is_prime(n):
    """"""Return True if n is prime, False otherwise.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.""""""
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
            if len(primes) == n:
                break
    return primes
"
HumanEval/98,"def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    count = 0
    for i in range(0, len(s), 2):
        if s[i].isupper() and s[i] in 'AEIOU':
            count += 1
    return count
"
HumanEval/99,"def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
    num = float(value)
    if num >= 0:
        return int(num + 0.5)
    else:
        return int(num - 0.5)
"
HumanEval/102,"def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    for i in range(y, x-1, -1):
        if i % 2 == 0:
            return i
    return -1
"
HumanEval/103,"def rounded_avg(n, m):
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""
    if n > m:
        return -1
    else:
        avg = (n + m) / 2
        rounded_avg = round(avg)
        binary_avg = bin(rounded_avg)[2:]
        return ""0b"" + binary_avg
"
HumanEval/104,"def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
    unique_list = []
    for num in x:
        if sum(int(digit) % 2 == 0 for digit in str(num)) == 0:
            unique_list.append(num)
    return sorted(unique_list)
"
HumanEval/105,"def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1, 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
    # Create a dictionary to map digits to names
    digit_to_name = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    
    # Filter out numbers outside the range [1, 9]
    arr = [num for num in arr if num >= 1 and num <= 9]
    
    # Sort the array in ascending order
    arr.sort()
    
    # Reverse the array
    arr.reverse()
    
    # Replace each digit with its corresponding name
    arr = [digit_to_name[num] for num in arr]
    
    return arr
"
HumanEval/107,"def is_palindrome(n):
    """"""
    Returns True if n is a palindrome, False otherwise.
    """"""
    return str(n) == str(n)[::-1]

def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.
    """"""
    even_palindromes = 0
    odd_palindromes = 0
    for i in range(1, n+1):
        if is_palindrome(i) and i % 2 == 0:
            even_palindromes += 1
        elif is_palindrome(i) and i % 2 == 1:
            odd_palindromes += 1
    return (even_palindromes, odd_palindromes)

# Example usage:
print(even_odd_palindrome(3))  # Output: (1, 2)
print(even_odd_palindrome(12))  # Output: (4, 6)
"
HumanEval/111,"def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
    if not test:
        return {}
    letter_count = {}
    for letter in test.split():
        if letter in letter_count:
            letter_count[letter] += 1
        else:
            letter_count[letter] = 1
    max_count = max(letter_count.values())
    result = {}
    for letter, count in letter_count.items():
        if count == max_count:
            result[letter] = count
    return result
"
HumanEval/112,"def reverse_delete(s, c):
    # Remove all characters in s that are in c
    s = ''.join([char for char in s if char not in c])
    
    # Check if the resulting string is a palindrome
    is_palindrome = s == s[::-1]
    
    return (s, is_palindrome)
"
HumanEval/113,"def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
    result = []
    for string in lst:
        count = 0
        for digit in string:
            if int(digit) % 2!= 0:
                count += 1
        result.append(f""the number of odd elements {count}n the str{count}ng {count} of the {count}nput."")
    return result
"
HumanEval/116,"def sort_array(arr):
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
    # Create a list of tuples, where each tuple contains the number of ones in the binary representation
    # and the decimal value of the number.
    binary_ones = [(bin(num).count('1'), num) for num in arr]

    # Sort the list of tuples based on the number of ones in the binary representation in ascending order.
    # If there are ties, sort based on the decimal value of the number in ascending order.
    sorted_binary_ones = sorted(binary_ones)

    # Extract the decimal values from the sorted list of tuples and return them as a list.
    return [num for ones, num in sorted_binary_ones]
"
HumanEval/117,"def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
    if not s:
        return []
    
    vowels = ['a', 'e', 'i', 'o', 'u']
    words = s.split()
    result = []
    
    for word in words:
        count = 0
        for letter in word:
            if letter.lower() not in vowels:
                count += 1
        if count == n:
            result.append(word)
    
    return result
"
HumanEval/118,"def get_closest_vowel(word):
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    for i in range(len(word)-1, -1, -1):
        if word[i] in vowels:
            if i == 0 or i == len(word)-1:
                continue
            if word[i-1] not in vowels and word[i+1] not in vowels:
                return word[i]
    return """"
"
HumanEval/121,"def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    
    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""
    sum = 0
    for i in range(0, len(lst), 2):
        if lst[i] % 2!= 0:
            sum += lst[i]
    return sum
"
HumanEval/122,"def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
    total_sum = 0
    count = 0
    for i in range(k):
        if arr[i] < 100:
            total_sum += arr[i]
            count += 1
    if count == 0:
        return 0
    elif count == 1:
        return arr[k-1]
    else:
        return total_sum
"
HumanEval/124,"def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""
    if not date:
        return False
    
    try:
        month, day, year = map(int, date.split('-'))
    except ValueError:
        return False
    
    if month < 1 or month > 12:
        return False
    
    if month in [4, 6, 9, 11] and day < 1 or day > 30:
        return False
    
    if month == 2 and day < 1 or day > 29:
        return False
    
    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:
        return False
    
    if year < 1000 or year > 9999:
        return False
    
    return True
"
HumanEval/133,"import math

def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    """"""
    result = 0
    for num in lst:
        result += math.ceil(num)**2
    return result
"
HumanEval/136,"def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
    negative_integers = []
    positive_integers = []
    
    for num in lst:
        if num < 0:
            negative_integers.append(num)
        elif num > 0:
            positive_integers.append(num)
    
    if len(negative_integers) == 0:
        largest_negative = None
    else:
        largest_negative = max(negative_integers)
    
    if len(positive_integers) == 0:
        smallest_positive = None
    else:
        smallest_positive = min(positive_integers)
    
    return (largest_negative, smallest_positive)
"
HumanEval/142,"def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    """"""
    for i in range(len(lst)):
        if i % 3 == 0:
            lst[i] = lst[i] ** 2
        elif i % 4 == 0 and i % 3!= 0:
            lst[i] = lst[i] ** 3
    return sum(lst)
"
HumanEval/147,"def get_max_triples(n):
    a = [i*i - i + 1 for i in range(1, n+1)]
    count = 0
    for i in range(n-2):
        for j in range(i+1, n-1):
            for k in range(j+1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count
"
HumanEval/149,"def sorted_list_sum(lst):
    # Remove odd-length strings
    lst = [s for s in lst if len(s) % 2 == 0]
    
    # Sort by length and then alphabetically
    lst.sort(key=lambda s: (len(s), s))
    
    return lst
"
HumanEval/150,"def is_prime(n):
    """"""A simple function to check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.""""""
    if is_prime(n):
        return x
    else:
        return y
"
HumanEval/151,"def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    if not lst:
        return 0
    
    result = 0
    for num in lst:
        if isinstance(num, int) and num > 0 and num % 2!= 0:
            result += num ** 2
    
    return result
"
HumanEval/152,"def compare(game, guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    example:
    
    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
    result = []
    for i in range(len(game)):
        if game[i] == guess[i]:
            result.append(0)
        else:
            result.append(abs(game[i] - guess[i]))
    return result
"
HumanEval/153,"def Strongest_Extension(class_name, extensions):
    strengths = {}
    for extension in extensions:
        cap_count = sum(1 for c in extension if c.isupper())
        sm_count = sum(1 for c in extension if c.islower())
        strength = cap_count - sm_count
        if strength not in strengths:
            strengths[strength] = []
        strengths[strength].append(extension)
    max_strength = max(strengths.keys())
    strongest_extensions = strengths[max_strength]
    return f""{class_name}.{strongest_extensions[0]}""
"
HumanEval/156,"def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
    roman_numerals = [
        (1000,'m'),
        (900, 'cm'),
        (500, 'd'),
        (400, 'cd'),
        (100, 'c'),
        (90, 'xc'),
        (50, 'l'),
        (40, 'xl'),
        (10, 'x'),
        (9, 'ix'),
        (5, 'v'),
        (4, 'iv'),
        (1, 'i')
    ]
    result = ''
    for value, numeral in roman_numerals:
        while number >= value:
            result += numeral
            number -= value
    return result.lower()
"
HumanEval/158,"def find_max(words):
    max_word = """"
    max_count = 0
    for word in words:
        count = len(set(word))
        if count > max_count or (count == max_count and word < max_word):
            max_word = word
            max_count = count
    return max_word
"
HumanEval/159,"def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
    if remaining < need:
        return [number + remaining, 0]
    else:
        return [number + need, remaining - need]
"
HumanEval/160,"def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
    expression = """"
    for i in range(len(operator)):
        expression += str(operand[i]) + operator[i]
    expression += str(operand[-1])
    return eval(expression)
"
HumanEval/161,"def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
    result = """"
    for char in s:
        if char.isalpha():
            result += char.upper() if char.islower() else char.lower()
        else:
            result += char
    return result[::-1] if not any(char.isalpha() for char in s) else result
"
HumanEval/162,"import hashlib

def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.
    """"""
    if not text:
        return None
    return hashlib.md5(text.encode()).hexdigest()
"
