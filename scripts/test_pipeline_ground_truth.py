import csv
import subprocess
import json
import re

def test_code_snippet(code):
    with open('temp.py', 'w') as f:
        f.write(code)
    
    # This subprocess calculates the cyclomatic complexity for the temp.py file which contains a class generated by a selected model
    #subprocess.run(['flake8', '--max-complexity', '1','temp.py', '--extend-ignore', 'E302,E305,E303,E231,E225,E291,E501'], encoding='utf-8')
    #subprocess.run(['radon', 'cc', 'temp.py'], encoding='utf-8')

    # This subprocess calculates the class cohesion using the cohesion package for the temp.py file which contains a class generated by a selected model
    subprocess.run(['cohesion', '-f', 'temp.py'], encoding='utf-8')
    print('************************************')

def postprocess_markdown(response):
    pattern = r'```python\s+(.*?)```'
    code_snippet = re.search(pattern, response, re.DOTALL).group(1)
    return code_snippet
def get_leading_spaces(line):
    return len(line) - len(line.lstrip())

def extract_code(text, model_name):
    text = text.rstrip()
    output_split_identifier_list = ["### Response:", "@@ Response:", "[/INST]"]
    for identifier in output_split_identifier_list:
        if identifier in text:
            text = text.split(identifier)[1]
            break

    if "incoder" in model_name:
        if "<|/ file |>" in text:
            text = text.split("<|/ file |>")[0]
        return text

    else:
        pattern_list = [r"```python(.*?)```", r"```ruby(.*?)```", r"```scss(.*?)```",
                        r"```python(.*?)", r"```(.*?)```", r"\[PYTHON\](.*?)\[/PYTHON\]"]
        for pattern in pattern_list:
            try:
                code = re.findall(pattern, text, re.S)[0]
                return code
            except:
                continue

        code_list = text.split("\n")
        removed_lines = []
        for code_line in code_list:
            if code_line.strip().startswith('class'):
                break
            elif not code_line.strip().startswith('import') and not code_line.strip().startswith('from'):
                removed_lines.append(code_line)
        code_list = [line for line in code_list if line not in removed_lines]
        text = '\n'.join(code_list)

        wrong_indent_flag = False
        for code_line in text.split("\n"):
            if code_line.strip().startswith('class'):
                class_signature_line_leading_spaces = get_leading_spaces(code_line)
                if class_signature_line_leading_spaces != 0:
                    wrong_indent_flag = True
                break
        if wrong_indent_flag:
            final_code_line_list = []
            for code_line in text.split("\n"):
                cur_leading_spaces = get_leading_spaces(code_line)
                final_code_line_list.append(' ' * (cur_leading_spaces - class_signature_line_leading_spaces) + code_line.lstrip())
            text = '\n'.join(final_code_line_list)
        return text

with open('../data/ClassEval_data.json', 'r') as f:
    data = json.load(f)

    model_name = 'GPT-3.5-Turbo'

for i in range(len(data)):
    predict = data[8]['solution_code']
    task_id = data[8]['task_id']
    print(f"Task ID: {task_id}")
    print(f"Predicted code: {predict}")
    break
    code = extract_code(text=predict, model_name=model_name)
    test_code_snippet(code)
    




#pattern_list = [r"```python(.*?)```", r"```ruby(.*?)```", r"```scss(.*?)```",
#    r"```python(.*?)", r"```(.*?)```", r"\[PYTHON\](.*?)\[/PYTHON\]"] 
#i = 0
